name: Rust-Build
on:
  workflow_dispatch: {}
env:
  BIN_NAME: rust-action-test
jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        build: [linux, macos, windows]
        include:
          - build: linux
            os: ubuntu-latest
            archive-name: ${{ env.BIN_NAME }}-x86_64-linux.tar.gz
            target: x86_64-unknown-linux-musl
          - build: macos
            os: ubuntu-latest
            archive-name: ${{ env.BIN_NAME }}-x86_64-macos.tar.gz
            target: x86_64-apple-darwin
          - build: windows
            os: windows-2019
            archive-name: ${{ env.BIN_NAME }}-x86_64-windows.7z
            target: x86_64-pc-windows-msvc
      fail-fast: false

    steps:
      - uses: actions/checkout@v2
      - uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
      - name: Install toolchain
        run: |
          rustup target add ${{ matrix.target }}
          cargo install cross

      - name: Build binary
        run: cross build --verbose --release --target ${{ matrix.target }}
        env:
          RUST_BACKTRACE: 1

      - name: Build archive
        shell: bash
        run: |
          mkdir archive
          cd archive
          if [ "${{ matrix.build }}" = "windows" ]; then
            cp "../target/${{ matrix.target }}/release/rust-action-test.exe" ./
            7z a "${{ matrix.archive-name }}" rust-action-test.exe
          else
            cp "../target/${{ matrix.target }}/release/rust-action-test" ./
            tar -czf "${{ matrix.archive-name }}" rust-action-test
          fi
      - name: Upload archive
        uses: actions/upload-artifact@v3
        with:
          name: ${{ matrix.archive-name }}
          path: archive/${{ matrix.archive-name }}
